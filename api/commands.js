const { botData } = require('../config.json')
const gAPI = require('./spreadsheed')
const reportLogic = require('./reportLogic');
const path = require('path');
const fs = require('fs')
const { performance } = require('perf_hooks');
const createReport = require('./report.js');

console.log(gAPI);

const commands = {
 // ! kludge for command using. When invocing command from bot messages, we have its username as postfix
 // ! and telegraf can do nothing about it. So this (f) is being called when user invoce function with
 // ! other bot postfix
    nocommand: async (ctx) => {
        console.log('Chillin');
    },
// ! -----------------------------------------------------------------------------------------
    rep: async (ctx, bot) => {
        if (ctx.message.reply_to_message) {
            let result = await createReport.report(ctx)
            console.log(result);
        } else {
            ctx.reply('/rep –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        }
    },

    help: async (ctx) => {
        ctx.replyWithHTML(
            '<b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n'+
            '–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ —Ñ–∏–∫–±—É–∫!\n'+
            '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–º–∞–Ω–¥:\n'+
            '/rep - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n'+
            '/stat - —É–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n'+
            '/info - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n'+
            '/ping - —É–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞'
        )
    },

    total: async (ctx) => {
        // TODO total value of messages

        ctx.reply('–ò–∑–≤–∏–Ω–∏, –Ω–æ —ç—Ç–∞ –∫–æ–º–º–∞–Ω–¥–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üò¢')
    },

    info: async (ctx) => {
        ctx.replyWithHTML(
            `–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ –§–∏–∫–±—É–∫\n\n`+
            `–í–ª–∞–¥–µ–ª–µ—Ü: <b>${botData.ownership}</b>\n`+
            `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫/–∏: <b>${botData.developers}</b>\n`+
            `–í–µ—Ä—Å–∏—è: <b>${botData.version}\n</b>\n`+
            '–í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–∞–Ω–¥—ã stat –∏ ping, '+ 
            '–∞ —Ç–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ —á–µ—Ä–µ–∑' + 
            ' 20 —Å–µ–∫—É–Ω–¥ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ—Å–ª–µ' +
            ' –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏—è-—Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è, –µ—Å–ª–∏ –∫–æ–º–º'+
            '–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —Ç–∞–∫–æ–º '+
            "—Å–ª—É—á–∞–µ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥"
        )
    },

    stat: async (ctx) => {
        let count = 0
        fs.readFile(path.join(__dirname + '/statistics.json'), (err, data) => {
            if (err) throw new Error;
            let Reports = JSON.parse(data)
            Reports = Reports.totalReports
            count = Number(Reports)
            ctx.reply(`–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤: ${count}`)
        })
    },

    ping: async (ctx, not_needed, pingStarted) => {
        let check = await gAPI.loadInfo()
        .then(data => {
            let pingEnded = Math.floor(performance.now() - pingStarted)
            console.log(pingEnded, 'pingEnded!');
            ctx.reply(`–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ ${pingEnded}–º—Å`);
        })
    },

    // warn: async (ctx) => {

    // },

    // ban: async (ctx) => {

    // }
}

module.exports = commands